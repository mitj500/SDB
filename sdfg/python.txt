# exp3 BFS (Breadth First Search)
from collections import deque
def bfs(graph, start):
    visited = set()
    queue = deque([start])
    visited.add(start)
    
    while queue:
        vertex = queue.popleft()
        print(vertex, end=" ")
        
        for neighbor in graph[vertex]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
start_node = 'A'
print("BFS traversal starting from node", start_node)
bfs(graph, start_node)
# End




#exp4 DFS (Depth First Search)
def dfs_recursive(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start, end=" ")
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs_recursive(graph, neighbor, visited)
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
start_node = 'A'
print("DFS traversal starting from node", start_node)
dfs_recursive(graph, start_node)
# End




# exp 5 8 Queen problem | N Queen problem
def is_safe(board, row, col):
 for i in range(row):
    if board[i] == col:
        return False
 i, j = row - 1, col - 1
 while i >= 0 and j >= 0:
    if board[i] == j:
        return False
    i -= 1
    j -= 1
 i, j = row - 1, col + 1
 while i >= 0 and j < 8:
    if board[i] == j:
        return False
    i -= 1
    j += 1
 return True
def solve_queens(board, row):
 if row >= 8:
    return True
 for col in range(8):
    if is_safe(board, row, col):
        board[row] = col
        if solve_queens(board, row + 1):
            return True
        board[row] = -1
 return False
def print_board(board):
 for row in range(8):
    for col in range(8):
        if board[row] == col:
            print("Q", end=" ")
        else:
            print(".", end=" ")
    print()
def solve_8_queens():
 board = [-1] * 8
 if solve_queens(board, 0):
    print("Solution exists:")
    print_board(board)
 else:
    print("No solution exists")
solve_8_queens()
# End




# exp6 8 puzzle problem
# (0 represents blank space)


# Example input:
# Enter the start state matrix:
# Enter row 1: 1 2 3
# Enter row 2: 4 5 0
# Enter row 3: 6 7 8
# Enter the goal state matrix:
# Enter row 1: 1 2 3
# Enter row 2: 4 5 6
# Enter row 3: 7 8 0

from queue import PriorityQueue

class Node:
    def __init__(self, state, parent=None, action=None, depth=0, cost=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.depth = depth
        self.cost = cost

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(str(self.state))

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(node):
    i, j = get_blank_position(node.state)
    neighbors = []
    for move in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
        new_i, new_j = i + move[0], j + move[1]
        if 0 <= new_i < 3 and 0 <= new_j < 3:
            new_state = [row[:] for row in node.state]
            new_state[i][j], new_state[new_i][new_j] = new_state[new_i][new_j], new_state[i][j]
            neighbors.append(Node(new_state, parent=node, action=(i, j), depth=node.depth + 1, cost=node.depth + 1 + heuristic(new_state)))
    return neighbors

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.state)
        node = node.parent
    return path[::-1]

def heuristic(state):
    total_cost = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                goal_x, goal_y = (state[i][j] - 1) // 3, (state[i][j] - 1) % 3
                total_cost += abs(goal_x - i) + abs(goal_y - j)
    return total_cost

def enter_state(prompt):
    print(prompt)
    state = []
    for i in range(3):
        row = input(f"Enter row {i + 1}: ").split()
        row = [int(num) for num in row]
        state.append(row)
    return state

def a_star_search(initial_state, goal_state):
    start_node = Node(initial_state)
    frontier = PriorityQueue()
    frontier.put(start_node)
    explored = set()

    while not frontier.empty():
        current_node = frontier.get()
        if current_node.state == goal_state:
            return reconstruct_path(current_node)
        explored.add(current_node)

        for neighbor in get_neighbors(current_node):
            if neighbor not in explored:
                frontier.put(neighbor)

    return None

initial_state = enter_state("Enter the start state matrix:")
goal_state = enter_state("Enter the goal state matrix:")

solution_path = a_star_search(initial_state, goal_state)
if solution_path:
    print("Solution found! Steps to reach the goal state:")
    for step, state in enumerate(solution_path):
        print(f"Step {step}:")
        for row in state:
            print(row)
        print()
else:
    print("No solution found!")
# End




#exp 7 A* algorithm | A star algorithm
def aStarAlgo(start_node, stop_node):
    open_set = set(start_node)
    closed_set = set()
    g = {}
    parents = {}
    g[start_node] = 0
    parents[start_node] = start_node
    while len(open_set) > 0:
        n = None
        for v in open_set:
            if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v
        if n == stop_node or Graph_nodes[n] == None:
            pass
        else:
            for (m, weight) in get_neighbors(n):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)
        if n == None:
            print('Path does not exist!')
            return None
        if n == stop_node:
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start_node)
            path.reverse()
            print('Path found: {}'.format(path))
            return path
        open_set.remove(n)
        closed_set.add(n)
    print('Path does not exist!')
    return None

def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None

def heuristic(n):
    H_dist = {
        'A': 10,
        'B': 8,
        'C': 5,
        'D': 7,
        'E': 3,
        'F': 6,
        'G': 5,
        'H': 3,
        'I': 1,
        'J': 0
    }
    return H_dist[n]

Graph_nodes = {
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3), ('D', 2)],
    'C': [('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 8)],
    'E': [('I', 5), ('J', 5)],
    'F': [('G', 1),('H', 7)] ,
    'G': [('I', 3)],
    'H': [('I', 2)],
    'I': [('E', 5), ('J', 3)],
}
aStarAlgo('A', 'J')
# End




# exp8 MiniMax algorithm alpha beta pruning | MinMax | Min-Max
MAX, MIN = 1000, -1000
def minimax(depth, nodeIndex, maximizingPlayer,values, alpha, beta):
    if depth == 3:
        return values[nodeIndex]
    if maximizingPlayer:
        best = MIN

        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i,False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)

            if beta <= alpha:
                break
        return best
    else:
        best = MAX
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i ,True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break
        return best
if __name__ == "__main__":
    values=[1, 4, 2, 3, 0, 1, 7, -1]
    print(values)
    print("The optimal value is :", minimax(0, 0, True, values,MIN, MAX)) 

# End